name: Deploy to EC2 Airflow

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Prepare SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Network Diagnostics
      run: |
        echo "GitHub Actions Runner IP: $(curl -s https://api.ipify.org)"
        
        # Test network connectivity
        ssh -vvv \
          -o StrictHostKeyChecking=no \
          -i ~/.ssh/id_rsa \
          ec2-user@52.205.187.101 \
          'dd if=/dev/zero of=/dev/null bs=1M count=100'

    - name: Deploy to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "dags/,plugins/,requirements.txt,docker-compose.yaml"
        target: "/home/ec2-user/airflow"
        strip_components: 0
        timeout: 5m  # Increased timeout

    - name: Execute commands on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Check if configuration files were updated
          RESTART_NEEDED=false
          if [ -f ~/airflow/requirements.txt.original ] && ! cmp -s ~/airflow/requirements.txt ~/airflow/requirements.txt.original; then
            RESTART_NEEDED=true
          fi
          if [ -f ~/airflow/docker-compose.yaml.original ] && ! cmp -s ~/airflow/docker-compose.yaml ~/airflow/docker-compose.yaml.original; then
            RESTART_NEEDED=true
          fi
          
          # Save current versions as original
          cp ~/airflow/requirements.txt ~/airflow/requirements.txt.original
          cp ~/airflow/docker-compose.yaml ~/airflow/docker-compose.yaml.original
          
          # Restart Airflow if needed
          if [ "$RESTART_NEEDED" = true ]; then
            cd ~/airflow
            docker compose down
            docker compose up -d
          fi
          
          echo "Deployment completed successfully"